import React, { useEffect } from 'react';
import ReactDOM from 'react-dom';

export type ToastProps = {
    variant: 'success' | 'danger' | 'warning' ;
    body: string;
    onDismiss?: () => void;
  };

export const Toast: React.FC<ToastProps> = ({ variant, body }) => {
    useEffect(() => {
        const timer = setTimeout(() => {
          const toast = document.getElementById(`toast-${variant}`);
          if (toast) {
            toast.style.opacity = '0';
            setTimeout(() => {
              toast.remove();
            }, 300); // vreme trajanja animacije u milisekundama
          }
        }, 3000); // vreme prikaza toasta u milisekundama
    
        return () => clearTimeout(timer);
      }, [variant]);
  const getIconColorClass = (variant:string) => {
    switch (variant) {
      case 'success':
        return 'text-grey-500 bg-green-100 bg-green-800 ';
      case 'danger':
        return 'text-red-500 bg-red-100 dark:bg-red-800 dark:text-red-200';
      case 'warning':
        return 'text-orange-500 bg-orange-100 dark:bg-orange-700 dark:text-orange-200';
      default:
        return '';
    }
  };

  const getIconPath = (variant:string) => {
    switch (variant) {
      case 'success':
        return (
          <path
            d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 8.207-4 4a1 1 0 0 1-1.414 0l-2-2a1 1 0 0 1 1.414-1.414L9 10.586l3.293-3.293a1 1 0 0 1 1.414 1.414Z"
            fill="currentColor"
          />
        );
      case 'danger':
        return (
          <path
            d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM13.707 11.793a1 1 0 1 1-1.414 1.414L10 11.414l-2.293 2.293a1 1 0 0 1-1.414-1.414L8.586 10 6.293 7.707a1 1 0 0 1 1.414-1.414L10 8.586l2.293-2.293a1 1 0 0 1 1.414 1.414L11.414 10l2.293 2.293Z"
            fill="currentColor"
          />
        );
      case 'warning':
        return (
          <path
            d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM10 15a1 1 0 1 1 0-2 1 1 0 0 1 0 2Zm1-4a1 1 0 0 1-2 0V6a1 1 0 0 1 2 0v5Z"
            fill="currentColor"
          />
        );
      default:
        return null;
    }
  };

  return ReactDOM.createPortal(
    <div
    id={`toast-${variant}`}
    className={`sticky bottom-5 lg:bottom-4 lg:left-5 transform lg:-translate-x-0 left-1/2 
      transform -translate-x-1/2 z-50 flex items-center w-full max-w-xs p-4 mb-4 rounded-lg
      shadow  ${getIconColorClass(variant)}`}
    role="alert"
    style={{ opacity: '1', transition: 'opacity 0.3s ease-out' }}
  >
      <div className="inline-flex items-center justify-center flex-shrink-0 w-8 h-8 rounded-lg">
        <svg className="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
          {getIconPath(variant)}
        </svg>
        <span className="sr-only">Icon</span>
      </div>
      <div className="ms-3 text-sm font-normal">{body}</div>
      <button
        type="button"
        className="ms-auto -mx-1.5 -my-1.5 bg-gray-100 bg-opacity-10 hover:bg-opacity-30 text-gray-100 rounded-lg focus:ring-2
         focus:ring-gray-300 p-1.5 hover:bg-gray-100 inline-flex items-center justify-center h-8 w-8"
        data-dismiss-target={`#toast-${variant}`}
        aria-label="Close"
        onClick={() => {
          const toast = document.getElementById(`toast-${variant}`);
          if (toast) {
            toast.style.opacity = '0';
            setTimeout(() => {
              toast.remove();
            }, 300); // trajanje animacije u milisekundama
          }
        }}
      >
        <span className="sr-only">Close</span>
        <svg className="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
          <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
        </svg>
      </button>
    </div>, 
    document.getElementById('toast-container') || document.body
  );
};

export default Toast;
